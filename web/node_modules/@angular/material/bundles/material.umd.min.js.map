{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeDef as any)['ctorParameters'] = () => (CdkTreeNodeDef as any)['ctorParameters'];\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodePadding as any)['ctorParameters'] = () =>\n    (CdkTreeNodePadding as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTree as any)['ctorParameters'] = () => (CdkTree as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeToggle as any)['ctorParameters'] = () => (CdkTreeNodeToggle as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatCellDef as any)['ctorParameters'] = () => (CdkCellDef as any)['ctorParameters'];\n(MatHeaderCellDef as any)['ctorParameters'] = () => (CdkHeaderCellDef as any)['ctorParameters'];\n(MatFooterCellDef as any)['ctorParameters'] = () => (MatFooterCellDef as any)['ctorParameters'];\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatHeaderRowDef as any)['ctorParameters'] = () => (CdkHeaderRowDef as any)['ctorParameters'];\n(MatFooterRowDef as any)['ctorParameters'] = () => (CdkFooterRowDef as any)['ctorParameters'];\n(MatRowDef as any)['ctorParameters'] = () => (CdkRowDef as any)['ctorParameters'];\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTabLabel as any)['ctorParameters'] = () => (CdkPortal as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepLabel as any)['ctorParameters'] = () => (CdkStepLabel as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepper as any)['ctorParameters'] = () => (CdkStepper as any)['ctorParameters'];\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepperNext as any)['ctorParameters'] = () => (CdkStepperNext as any)['ctorParameters'];\n(MatStepperPrevious as any)['ctorParameters'] = () =>\n    (CdkStepperPrevious as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTable as any)['ctorParameters'] = () => (CdkTable as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, because Angular will only instantiate\n    // this provider once, but we want the current location on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(touchstart)': '_openedBy = \"touch\"',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.asObservable().subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!event.altKey && !event.metaKey && !event.shiftKey && !event.ctrlKey) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTextareaAutosize as any)['ctorParameters'] = () =>\n    (CdkTextareaAutosize as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["dirChange","_this","_dir","change","observableOf","merge","_viewportRuler","pipe","takeUntil","_onDestroy","subscribe","_alignInkBar","MatTabNav","prototype","ngAfterContentChecked","this","_activeLinkChanged","activeTab","_tabLinks","find","tab","active","_activeLinkElement","_elementRef","ngOnDestroy","next","complete","_inkBar","show","alignToElement","nativeElement","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_super","call","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatCell","CdkColumnDef","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","element","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","arrowPosition","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkFooterCell","_step","_roundToDecimal","toString","split","pop","MatSlider","_thumbLabel","_tickInterval","_value","_min","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","ScrollDispatcher","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","itemHeight","_getItemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","empty","_getOptionIndex","_selectionModel","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","(touchstart)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","result","current","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","metaKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","MatCheckbox","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","normalizePassiveListenerOptions","passive","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}